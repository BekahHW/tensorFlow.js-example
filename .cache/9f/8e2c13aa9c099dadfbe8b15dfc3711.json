{"id":"node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","dependencies":[{"name":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js.map","includedInParent":true,"mtime":1629319051727},{"name":"/Users/bekah/Projects/tensorFlow.js-example/package.json","includedInParent":true,"mtime":1629733561834},{"name":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-backend-webgl/package.json","includedInParent":true,"mtime":1629319051727},{"name":"@tensorflow/tfjs-core","loc":{"line":17,"column":29},"parent":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","resolved":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-core/dist/index.js"},{"name":"./gpgpu_math","loc":{"line":18,"column":33},"parent":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js","resolved":"/Users/bekah/Projects/tensorFlow.js-example/node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinaryOpProgram = exports.SQUARED_DIFFERENCE = exports.CHECK_NAN_SNIPPET = void 0;\n\nvar _tfjsCore = require(\"@tensorflow/tfjs-core\");\n\nvar _gpgpu_math = require(\"./gpgpu_math\");\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexports.CHECK_NAN_SNIPPET = CHECK_NAN_SNIPPET;\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexports.SQUARED_DIFFERENCE = SQUARED_DIFFERENCE;\n\nclass BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['A', 'B'];\n    this.outputShape = _tfjsCore.backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = (0, _gpgpu_math.useShapeUniforms)(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n\n}\n\nexports.BinaryOpProgram = BinaryOpProgram;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":7},"generated":{"line":28,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":13},"generated":{"line":28,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":30},"generated":{"line":28,"column":23}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":33},"generated":{"line":28,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":22,"column":7},"generated":{"line":31,"column":1}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":7},"generated":{"line":33,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":13},"generated":{"line":33,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":31},"generated":{"line":33,"column":24}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":34},"generated":{"line":33,"column":27}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":27,"column":7},"generated":{"line":33,"column":54}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":36,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":36,"column":6}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":6},"generated":{"line":36,"column":21}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":28},"generated":{"line":36,"column":22}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":2}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":13}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":14},"generated":{"line":37,"column":14}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":16}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":26},"generated":{"line":37,"column":18}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":24}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":44},"generated":{"line":37,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":2},"generated":{"line":37,"column":32}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":34,"column":60},"generated":{"line":37,"column":34}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":38,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":38,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":38,"column":22}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":38,"column":25}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":19},"generated":{"line":38,"column":26}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":38,"column":29}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":38,"column":31}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":38,"column":34}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":38,"column":35}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":4},"generated":{"line":39,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":9},"generated":{"line":39,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":4},"generated":{"line":39,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":39,"column":23}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":36},"generated":{"line":39,"column":46}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":39,"column":72}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":63},"generated":{"line":39,"column":73}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":39,"column":79}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":71},"generated":{"line":39,"column":81}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":23},"generated":{"line":39,"column":87}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":35,"column":4},"generated":{"line":39,"column":88}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":40,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":40,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":40,"column":28}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":31},"generated":{"line":40,"column":31}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":48},"generated":{"line":40,"column":65}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":53},"generated":{"line":40,"column":70}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":48},"generated":{"line":40,"column":81}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":65},"generated":{"line":40,"column":82}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":31},"generated":{"line":40,"column":88}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":40,"column":89}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":37,"column":4},"generated":{"line":41,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":37,"column":9},"generated":{"line":41,"column":9}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":37,"column":4},"generated":{"line":41,"column":17}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":37,"column":20},"generated":{"line":41,"column":20}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":39,"column":10},"generated":{"line":43,"column":10}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":43,"column":12}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":37,"column":4},"generated":{"line":51,"column":5}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":48,"column":3},"generated":{"line":52,"column":0}},{"source":"../src/binaryop_gpu.ts","name":null,"original":{"line":28,"column":28},"generated":{"line":54,"column":0}}],"sources":{"../src/binaryop_gpu.ts":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"86f020c56f525315bd11c19a31f3b69b","cacheData":{"env":{}}}